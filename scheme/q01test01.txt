Question 1 > Suite 1 > Case 2
(cases remaining: 6)

>>> from scheme_reader import *
>>> src = Buffer(tokenize_lines(["(+ 1 ", "(+ 23 4)) ("]))
>>> src.current()
'('
>>> src.remove_front()
'('
>>> src.current()
'+'
>>> src.remove_front()
'+'
>>> src.remove_front()
1
>>> scheme_read(src)
Pair('+', Pair(23, Pair(4, nil)))
>>> src.current()
? '+'
-- Not quite. Try again! --

? nil
-- Not quite. Try again! --

? True
-- Not quite. Try again! --

? Error
-- Not quite. Try again! --

=====================================================================
Assignment: Project 4: A Scheme Interpreter
OK, version v1.7.8
=====================================================================

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Unlocking tests

At each "? ", type what you would expect the output to be.
Type exit() to quit

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 1
(cases remaining: 7)

-- Already unlocked --

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 2
(cases remaining: 6)

-- Already unlocked --

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 3
(cases remaining: 5)

>>> from scheme_reader import *
>>> scheme_read(Buffer(tokenize_lines(['(+ 23 4)'])))
? Pair('+', Pair(23, Pair(4, nil)))
-- OK! --

>>> read_line('(+ 23 4)')  # Shorter version of above!
? 23 + 4
-- Not quite. Try again! --

? 27
-- Not quite. Try again! --

? '23 + 4'
-- Not quite. Try again! --

? '+ 23 4'
-- Not quite. Try again! --

? Pair('+', Pair(23, Pair(4, nil)))
-- OK! --

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 4
(cases remaining: 4)

>>> from scheme_reader import *
>>> read_tail(Buffer(tokenize_lines([')'])))
? nil
-- OK! --

>>> read_tail(Buffer(tokenize_lines(['2 3)'])))
? Pair(2, Pair(3, nil))
-- OK! --

>>> read_tail(Buffer(tokenize_lines(['2 (3 4))'])))
? Pair(2, Pair(3, 4))
-- Not quite. Try again! --

? Pair(2, Pair(Pair(3, Pair(4, nil))))
-- Not quite. Try again! --

? Pair(2, Pair(3, Pair(4, nil)))
-- Not quite. Try again! --

? Pair(2, Pair(3, Pair(4, nil)))
-- Not quite. Try again! --

? Pair(2, Pair(Pair(3, Pair(4, nil))))
-- Not quite. Try again! --

? nil
-- Not quite. Try again! --

? Pair(2, Pair(Pair(3, Pair(4, nil), nil)))
-- Not quite. Try again! --

? Pair(2, Pair(Pair(3, Pair(4, nil))), nil)
-- Not quite. Try again! --

? Pair(2, nil)
-- Not quite. Try again! --

? Pair(2, Pair(Pair(3, Pair(4, nil)), nil))
-- OK! --

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 5
(cases remaining: 3)

-- Already unlocked --

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 6
(cases remaining: 2)

>>> from scheme_reader import *
>>> read_line("(+ (- 2 3) 1)")
Choose the number of the correct choice:
0) Pair('+', Pair('-', Pair(2, Pair(3, nil))), Pair(1, nil))
1) Pair('+', Pair(Pair('-', Pair(2, Pair(3, nil))), Pair(1, nil)))
2) Pair('+', Pair('-', Pair(2, Pair(3, Pair(1, nil)))))
? 1
-- OK! --

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 7
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
? '('
-- Not quite. Try again! --

? "("
-- Not quite. Try again! --

? '+'
-- Not quite. Try again! --

? ' '
-- Not quite. Try again! --

? 23
-- Not quite. Try again! --

? ' '
-- Not quite. Try again! --

? 4
-- Not quite. Try again! --

? ')'
-- OK! --